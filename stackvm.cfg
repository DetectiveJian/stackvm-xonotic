// Stack Based Virtual Machine using Xonotic's builtin database and stack.
// by Jiān
// repo: https://github.com/DetectiveJian/stackvm-xonotic
//
// Suggested Reads:
// Xonotic Console Tips and tricks: https://forums.xonotic.org/showthread.php?tid=2987
// Xonotic rpn quakec source: https://gitlab.com/xonotic/xonotic-data.pk3dir/-/blob/master/qcsrc/common/command/rpn.qc
// Stack Machine on Wikipedia: https://en.wikipedia.org/wiki/Stack_machine
// Stack Based Virtual Machine written in Java: https://andreabergia.com/series/stack-based-virtual-machines/


set CLOCK_SPEED "0.001" // ~1KHz
set INSTRUCTION_POINTER "0"
set STACKVM_HALTED "0"
set FRAME_NUMBER "0"

// Frame
alias init_frame "rpn /${FRAME_NUMBER}.return_address ${INSTRUCTION_POINTER} put;"

init_frame	// setup initial frame at script execution.

// Machine Oprations
alias hlt 	"set STACKVM_HALTED 1"

// Stack Operations
alias push 	"rpn ${1} dbpush"
alias pop 	"rpn /STACKVM_LAST_POP dbpop ="
alias dup 	"rpn dbget dbpush"

// Arithmetic Operations
alias add 	"rpn dbpop dbpop exch + dbpush"
alias sub	"rpn dbpop dbpop exch - dbpush"
alias mul	"rpn dbpop dbpop exch * dbpush"
alias div	"rpn dbpop dbpop exch / dbpush"
alias mod 	"rpn dbpop dbpop exch % dbpush"
alias max	"rpn dbpop dbpop exch max dbpush"
alias min	"rpn dbpop dbpop exch min dbpush"

// Boolean Operations
alias and 	"rpn dbpop dbpop and dbpush"
alias or 	"rpn dbpop dbpop or dbpush"
alias not 	"rpn dbpop dup not dbpush"

// Comparison Operations
alias iseq	"rpn dbpop dbpop exch == dbpush"
alias isgt 	"rpn dbpop dbpop exch > dbpush"
alias isge	"rpn dbpop dbpop exch >= dbpush"
alias islt	"rpn dbpop dbpop exch < dbpush"
alias isle	"rpn dbpop dbpop exch <= dbpush"
alias isne	"rpn dbpop dbpop exch != dbpush"

// JUMP Instructions
alias jmp 	"rpn /INSTRUCTION_POINTER ${1} 1 - ="
alias jif 	"rpn /__IF_TRUE__ 1 0 dbpop when =; set __JUMP_ADDRESS__ ${1}; __jump_if_true__"
alias __jump_if_true__ "__jif_${__IF_TRUE__}__"
alias __jif_0__ ""
alias __jif_1__ "jmp ${__JUMP_ADDRESS__}"

// Variable Storing and loading.
alias store "rpn /${FRAME_NUMBER}.${1} dbpop put"
alias load_d	"rpn /${FRAME_NUMBER}.${1} get dbpush"

// Function calls and return
alias call 		"rpn /FRAME_NUMBER dup load 1 + =; init_frame; jmp ${1}"
alias ret 		"rpn /__IF_RET_TRUE__ 1 0 /FRAME_NUMBER load when =; __ret_check__"
alias __ret_check__ "__ret_${__IF_RET_TRUE__}__"
alias __ret_1__ "rpn /INSTRUCTION_POINTER ${FRAME_NUMBER}.return_address get = /FRAME_NUMBER dup load 1 - =;"
alias __ret_0__ "set STACKVM_HALTED 1; echo ^1Invalid return instruction [^2@ ${INSTRUCTION_POINTER}^1], frame is ^3${FRAME_NUMBER}^1...^7"

// print an interger from the stack head to console.
alias dot 		"rpn /STACKVM_OUT_BUFF dbpop =; print_cvar STACKVM_OUT_BUFF"
alias print_cvar "echo ${$1}"

// StackVM CPU, main
alias s "alias ${1} \"${2-}\""

alias __CPU_HALTED_0__ "${INSTRUCTION_POINTER}; rpn /INSTRUCTION_POINTER dup load 1 + =; defer ${CLOCK_SPEED} \"__CPU_POST_EXEC__\""
alias __CPU_POST_EXEC__ "__CPU_HALTED_${STACKVM_HALTED}__"
alias __CPU_HALTED_1__ ""

// Execute the program
alias run "__CPU_HALTED_${STACKVM_HALTED}__"

// Reset CPU
alias reset "set INSTRUCTION_POINTER 0; set STACKVM_HALTED 0; set FRAME_NUMBER 0; echo ^2[STACK VM]: CPU reset complete.^7"


// MISC
alias LABLE "set ${1} ${2}"

// just to be safe, in case user forgot to add hlt instruction to their program.
s 600 hlt
