// int square(int n) {
// 		return n * n;
// }

// square(n)
LABLE square 300
s 300 dup // [x] -> [x, x]
s 301 mul // x * x
s 302 ret

// int power(int x, int n) {
// 		int i = 1;
//		while (n > 0) {
//			i = i * x;
//			n = n - 1;
//		}
//		return i;
// }
// power(x, n)
LABLE power 400
// store the arguments, n & x
s 400 store n
s 401 store x

// int i = 1
s 402 push 1
s 403 store i

// while (n > 0)
// if n is less then 0 exit loop
s 404 load_d n
s 405 push 0
s 406 islt
s 407 jif 417

// i = i * x
s 408 load_d i
s 409 load_d x
s 410 mul
s 411 store i

// n = n - 1
s 412 load_d n
s 413 push 1
s 414 sub
s 415 store n

s 416 jmp 404

// return i
s 417 load_d i
s 418 ret
 