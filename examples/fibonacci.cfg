//origin 1000
// Fibonacci Number Program
//
// def fibonacci_num(n: int):
//		n1 = 0
//		n2 = 1
//		n3 = 0
//		while n > 0:
//			n3 = n1 + n2
//			n1 = n2
//			n2 = n3
//			n = n - 1
//		return n1
//
// fibonacci_num(n)
LABLE fibonacci_num
s store_l n // store the argument

// n1 = 0
s push 0
s store_l n1

// n2 = 1
s push 1
s store_l n2

// no need for n3 because n2 can duplicated on the stack,
// thus removing the need for a place holder.

// while n > 0
LABLE fibonacci_num_main_loop
s load_l n
s push 0
s isgt
s not
s load_g fibonacci_num_exit_main_loop
s jif_vfs

// n2 = n1 + n2
// n1 = n2
s load_l n2
s dup
s load_l n1
s add 
s store_l n2 // n2 = n1 + n2
s store_l n1 // n1 = n2

// n = n - 1
s load_l n
s push 1
s sub
s store_l n

s load_g fibonacci_num_main_loop
s jmp_vfs

LABLE fibonacci_num_exit_main_loop
s load_l n1
s ret
